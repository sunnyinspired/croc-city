{"ast":null,"code":"import _slicedToArray from \"/Users/nenisoft/Web_Projects/croc-city/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nenisoft/Web_Projects/croc-city/frontend/src/admin/pages/adminContext.js\";\n\nimport React, { createContext, useContext, useState } from \"react\";\nvar AdminContext = createContext();\nexport var AdminProvider = function AdminProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoggedIn = _useState2[0],\n      SetIsLoggedIn = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      SetUser = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      token = _useState6[0],\n      SetToken = _useState6[1];\n\n  return /*#__PURE__*/React.createElement(AdminContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      SetIsLoggedIn: SetIsLoggedIn,\n      user: user,\n      SetUser: SetUser,\n      token: token,\n      SetToken: SetToken\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, children);\n};\nexport var useAdminContext = function useAdminContext() {\n  return useContext(AdminContext);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","AdminContext","AdminProvider","children","isLoggedIn","SetIsLoggedIn","user","SetUser","token","SetToken","useAdminContext"],"sources":["/Users/nenisoft/Web_Projects/croc-city/frontend/src/admin/pages/adminContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\n\nconst AdminContext = createContext()\n\nexport const AdminProvider = ({ children }) =>{\n    const [isLoggedIn, SetIsLoggedIn] = useState(false)\n    const [user, SetUser] = useState([])\n    const [token, SetToken] = useState('')\n    return(\n        <AdminContext.Provider value={{isLoggedIn, SetIsLoggedIn, user, SetUser, token, SetToken}}>\n            {children}\n        </AdminContext.Provider>\n    )\n\n}\nexport const useAdminContext = () => useContext(AdminContext);\n\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AAEA,IAAMC,YAAY,GAAGH,aAAa,EAAlC;AAEA,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,OAAiB;EAAA,IAAdC,QAAc,QAAdA,QAAc;;EAAA,gBACNH,QAAQ,CAAC,KAAD,CADF;EAAA;EAAA,IACnCI,UADmC;EAAA,IACvBC,aADuB;;EAAA,iBAElBL,QAAQ,CAAC,EAAD,CAFU;EAAA;EAAA,IAEnCM,IAFmC;EAAA,IAE7BC,OAF6B;;EAAA,iBAGhBP,QAAQ,CAAC,EAAD,CAHQ;EAAA;EAAA,IAGnCQ,KAHmC;EAAA,IAG5BC,QAH4B;;EAI1C,oBACI,oBAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAE;MAACL,UAAU,EAAVA,UAAD;MAAaC,aAAa,EAAbA,aAAb;MAA4BC,IAAI,EAAJA,IAA5B;MAAkCC,OAAO,EAAPA,OAAlC;MAA2CC,KAAK,EAALA,KAA3C;MAAkDC,QAAQ,EAARA;IAAlD,CAA9B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKN,QADL,CADJ;AAMH,CAVM;AAWP,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB;EAAA,OAAMX,UAAU,CAACE,YAAD,CAAhB;AAAA,CAAxB"},"metadata":{},"sourceType":"module"}